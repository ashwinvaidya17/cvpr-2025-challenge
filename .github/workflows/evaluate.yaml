name: Evaluation Workflow

on:
  pull_request:
    types: [opened, synchronize]
    # paths:
    #   - "src/eval/submission/**"
  workflow_dispatch: # manually trigger the workflow

jobs:
  security-check:
    name: Security Check
    runs-on: vand2025-runner
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Run Zizmor security scan
        run: |
          uv tool install zizmor
          uvx zizmor .github/workflows/evaluate.yaml

  evaluate:
    needs: security-check
    runs-on: vand2025-runner
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout PR code for evaluation
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          persist-credentials: false
      - name: Save PR SHA
        run: echo $(git rev-parse HEAD) > pr_sha.txt
      - name: Run evaluation
        timeout-minutes: 300 # 5 hours timeout
        run: |
          GIT_LFS_SKIP_SMUDGE=1 uv sync
          uv run eval --dataset_path=/home/user/datasets/mvtec_loco
      - name: Upload evaluation results and SHA
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-results
          path: |
            results.json
            metrics.csv
            pr_sha.txt
          retention-days: 30

  publish-results:
    needs: evaluate
    runs-on: vand2025-runner
    permissions:
      contents: write
      pull-requests: read
    strategy:
      max-parallel: 1
    steps:
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      - name: Prepare temporary directories
        run: |
          rm -rf /tmp/static /tmp/merge
          mkdir -p /tmp/static /tmp/merge
      - name: Checkout static files source (base repo)
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          path: base_repo
      - name: Copy static files for leaderboard
        run: cp -r base_repo/.platform/static/* /tmp/static/
      - name: Copy merge script source (base repo)
        run: cp -r base_repo/.platform/merge/* /tmp/merge/
      - name: Download evaluation results and SHA
        uses: actions/download-artifact@v4
        with:
          name: evaluation-results
          path: /tmp/merge
      - name: Checkout gh-pages branch or create if needed
        run: |
          git clone "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" --branch gh-pages --single-branch gh_pages_repo || git clone "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" --orphan gh-pages --single-branch gh_pages_repo
          cd gh_pages_repo
          if [ ! -f ".nojekyll" ]; then
            git rm -rf .
            touch .nojekyll
            git add .nojekyll
            git commit -m "Initialize gh-pages branch"
          fi
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge results
        env:
          PR_NAME: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_CREATOR: ${{ github.event.pull_request.user.login }}
        run: |
          if [ -f /tmp/merge/results.csv ]; then
            cp /tmp/merge/results.csv /tmp/merge/results.csv
          fi
          cd /tmp/merge
          uv sync

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          PR_SHA=$(cat pr_sha.txt)
          uv run merge --pr_name="${PR_NAME}" --pr_number="${PR_NUMBER}" --pr_author="${PR_CREATOR}" --timestamp="${TIMESTAMP}" --pr_sha="${PR_SHA}"

          cp results.csv ../gh_pages_repo/results.csv
      - name: Copy Static files back to gh-pages checkout
        run: |
          cp -r /tmp/static/* gh_pages_repo/
      - name: Commit and Push results to gh-pages
        env:
          PR_NAME: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_CREATOR: ${{ github.event.pull_request.user.login }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd gh_pages_repo
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit to gh-pages."
          else
            git commit -m "Add evaluation results for PR \"${PR_NAME}\" (#${PR_NUMBER}) by ${PR_CREATOR}"
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" HEAD:gh-pages
          fi

  add-results-comment:
    needs: evaluate
    runs-on: vand2025-runner
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout base code (optional, for context if needed)
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Download evaluation results
        uses: actions/download-artifact@v4
        with:
          name: evaluation-results
          path: /tmp/evaluation-results
      - name: Add results comment
        uses: actions/github-script@v7
        env:
          PR_USER_LOGIN: ${{ github.event.pull_request.user.login }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const result = JSON.parse(fs.readFileSync('/tmp/evaluation-results/results.json', 'utf8'));
            let result_string = "";
            for (const [key, value] of Object.entries(result)) {
              result_string += `${key}: ${value}\n`;
            }
            const raw_metrics = fs.readFileSync('/tmp/evaluation-results/metrics.csv', 'utf8');
            raw_metrics_string = "||seed|k_shot|category|image_score|pixel_score|\n";
            raw_metrics_string += "|---|---|---|---|---|---|\n";
            raw_metrics.split('\n').forEach(line => {
              raw_metrics_string += `|${line.split(',')[0]}|${line.split(',')[1]}|${line.split(',')[2]}|${line.split(',')[3]}|${line.split(',')[4]}|${line.split(',')[5]}|\n`;
            });

            const comment = `## Evaluation Results
            ${result_string}
            ${raw_metrics_string}
            Created by: ${process.env.PR_USER_LOGIN}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
